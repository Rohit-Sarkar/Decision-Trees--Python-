from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier

iris = load_iris()
X = iris.data[:,2:] # petal length and width
Y = iris.target

tree_clf = DecisionTreeClassifier(max_depth = 2)
tree_clf.fit(X,Y)

from sklearn.tree import export_graphviz

export_graphviz(tree_clf,
				out_file = ("iris_tree.dot"),
				feature_names = iris.feature_names[2:],
				class_names = iris.target_names,
				rounded = True,
				filled = True
				)
				
# to view the graph , in the command line "$ dot -Tpng iris_tree.dot -o iris.png" in the path where the iris_tree.dot file is saved.zezz

#estimating the class probabilities

tree_clf.predict_proba([[5,1.5]]) # petal length is 5 and petal width is 1.5
# it will predict the probabilities of each class

tree_clf.predict([[5,1.5]])
# predict the class with higher probabilities.

#hyperparameters to regularize the model (i.e to reduce the overfit) are max_depth , min_samples_split, min_samples_leaf , min_weight_fraction_leaf 
and max_leaf_nodes.


#Regression 

from sklearn.tree import DecisionTreeRegressor

tree_reg = DecisionTreeRegressor(max_depth=2)
tree_reg.fit(X,Y)

# the values given in the regression is the average value of the instances in that node.